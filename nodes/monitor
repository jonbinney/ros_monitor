#!/usr/bin/env python
import roslib; roslib.load_manifest('ros_monitor')
import sys, time
import rospy

from ros_monitor.node_info import NodeInfo
from ros_monitor.process_info import ProcessInfo
from ros_monitor.msg import Stats, NodeStats, ConnectionStats

class RosMonitor:
   def __init__(self):
      self.ni = NodeInfo()
      self.pi = ProcessInfo()
      self.stat_pub = rospy.Publisher('/ros_monitor/stats', Stats)

   def run(self):
      update_rate = rospy.Rate(1.0)
      while not rospy.is_shutdown():
         self.run_once()
         update_rate.sleep()
      
   def run_once(self):
      stats_msg = Stats()
      stats_msg.header.stamp = rospy.Time.now()
      
      nodes = self.ni.get_nodes()
      process_info = self.pi.get_stats()
      for node_name in nodes:
         node_stats_msg = NodeStats()
         node_stats_msg.node_name = node_name
         node_dict = nodes[node_name]

         try:
            pid = node_dict['pid']
         except:
            rospy.logwarn('No node info for node %s' % (node_name,))
            continue
         
         node_stats_msg.pid = pid

         try:
            node_stats_msg.pcpu = process_info[pid]['pcpu']
         except:
            rospy.logwarn('No pcpu info for node %s (pid %d)' % (node_name, pid))

         try:
            node_stats_msg.vsz = process_info[pid]['vsz']
         except:
            rospy.logwarn('No vsz info for node %s (pid %d)' % (node_name, pid))

         stats_msg.node_stats.append(node_stats_msg)
         
      self.stat_pub.publish(stats_msg)

if __name__ == '__main__':
   rospy.init_node('ros_monitor', anonymous=True)
   
   rm = RosMonitor()
   rm.run()
   

